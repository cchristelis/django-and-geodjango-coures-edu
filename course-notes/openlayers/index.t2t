









== Controlling the map using javascript ==

=== A button to zoom to a place ===

The nice thing about openlayers is that once a map is loaded in your page, you can control that map using javascript. For example we could add a little button before the ``</body>`` terminator tag like this:

```
<input type="button" onclick="map.setCenter(new OpenLayers.LonLat(25,-24), 7 );" 
        value="Go To Your House" />
```

``<input type="button" value="Go To Your House" /> `` - This is html notation to place a button on the page with the text for the button specified by the label option.

The //onclick// event of this button has been programmed with some mapserver api calls. Lets break them down one at a time:

``map.setCenter()`` - Tells the openlayers map that we want to recenter it on a new point. This function takes two parameters - a coordinate and a zoom level.
``new OpenLayers.LonLat(25,-24)`` - Creates a new LonLat object - the point position to which we will be zooming. Note that openlayers calls any coordinate pair 'lonlat' - even if it is in a projected coordinate reference system.
``7`` - This is the zoom level to use when panning.  By default openlayers has 16 zoom levels with 0 representing the smallest scale and 16 the largest.


**Now You try:** Add a new layer to the map (use google to find the url of a wms layer if you don't have one handy.

If you have enabled firebug (and have enabled the jscript console, you can play around with the map interactively. For example, try these:

```
>>> map.setCenter(map.center,3)
>>> map.setCenter(map.center,8)
```

=== Showing and hiding layers ===

You can do many other things with the map api - here is how you might hide and show the first layer in the map.

```
>>> map.layers[0].setVisibility(false)
>>> map.layers[0].setVisibility(true)
```

Recent versions of firebug will 'intellisense complete' your javascript as you type. See if you can figure out some other ways to manipulate the map.


== Other sources of data ==

In the previous section we saw that it is easy to use WMS services with openlayers. There are other map sources you can use too. In this example, we will show you how to add an [open street map http://openstreetmap.org] dataset to your map. The OpenStreetmap project publish their data in the Google Mercator projection, so we need to do a little work to set up the map projection before we can add the layer.


**Map 2:**

```
<html>
    <head>
        <title>Tims Map</title>
        <link rel="stylesheet" href="openlayers/theme/default/style.css" type="text/css">
        <style>
            #map-id {
                width: 512px;
                height: 512px;
            }
        </style>
        <script src="openlayers/OpenLayers.js"></script>
    </head>
    <body>
        <h1>The world according to Tim</h1>
        <div id="map-id"></div>
        <script>
            var geographic = new OpenLayers.Projection("EPSG:4326");
            var mercator = new OpenLayers.Projection("EPSG:900913");

            var world = new OpenLayers.Bounds(-180, -89, 180, 89).transform(
                geographic, mercator
            );

            var options = {
                projection: mercator,
                units: "m",
                maxExtent: world
            };
            var map = new OpenLayers.Map("map-id", options);

            var osm = new OpenLayers.Layer.OSM();
            map.addLayer(osm);


            var gabs = new OpenLayers.LonLat(25,-24).transform(
                geographic, mercator
            );
            map.setCenter(gabs, 9);
        </script>
    </body>
</html>
```


Lets look in detail at the changes we have made to our project:

The <head> section remains unchanged as of the last example so I won't re-discuss it here.
Our script starts off with these two lines:

```
var geographic = new OpenLayers.Projection("EPSG:4326");
var mercator = new OpenLayers.Projection("EPSG:900913");
```

What we are doing is defining to //Projection// objects - one based on 'Geographic' (EPSG:4326) and one based on 'Google Mercator' (EPSG:900913). We will use these to calculate the dimensions of the bounding box for the map and if we need to do any other conversions between Geographic/Lat Lon and Google Mercator.

```
   var world = new OpenLayers.Bounds(-180, -89, 180, 89).transform(
        geographic, mercator
   );
```

Now we have defined the bounding box for the world by //transform//ing a rectangle described in Geographic into a rectangle described in meters using the Google Mercator projection.

```
   var options = {
     projection: mercator,
     units: "m",
     maxExtent: world
   };
```

The code above defines a variable 'options' and initialises it with an array of map options. We will pass this options list as a parameter to openlayers when we construct the map. You can see a [full list of options http://dev.openlayers.org/docs/files/OpenLayers/Map-js.html] by reading the mapserver api documentation. In our case, we are telling the map that its projection will be 'mercator', map units will be in meters and the maximum extent for the map will be the world rectangle which we calculated in the previous step.

```
    var map = new OpenLayers.Map("map-id", options);
```

This is the same as out first example, except now we have added the options parameter which is passed to the map when it is created.

```
    var osm = new OpenLayers.Layer.OSM();
    map.addLayer(osm);
```

Here we use the built in function to create a new OpenStreetMap (OSM) layer, and then add it to the map.

```
    var gabs = new OpenLayers.LonLat(25,-24).transform(
      geographic, mercator
    );
```

In this step we center the map (somewhere near Gabarone). Because the map is in EPSG:900913, we need to first reproject the LonLat coordinates for Gabarone to Google Mercator, in a similar way to the bounding box transform we carried out higher up.

```
    map.setCenter(gabs, 9);
```

Finally we can set the map center to Gabarone with a zoom level of 9.


Load your page and have a play around with it.

**Now you try:** Update the map so that it zooms to your house when it first loads.

== More complex interactions ==

Because everything is just html and javascript, you can create user interfaces to allow the user to interact with the map in other ways. In this example we add two input boxes (``input type ="text"``) and a button. When the user clicks the button, the values entered in the input boxes will be used to in a call to //map.setCenter()//.

```
        <label for="lon">Lon</label><input type="text" id="lon" />
        <label for="lat">Lat</label><input type="text" id="lat" />
        <input type="button" onclick="
          map.setCenter(
          new OpenLayers.LonLat(
          document.getElementById('lon').value,
          document.getElementById('lat').value)
          .transform(geographic, mercator), 14 );
          " value="Go!" /
        >
```

You will notice that we seamlessly transform the user's coordinates from EPSG:4326 to EPSG:900913.

== Bing! ==

You can add Bing maps to OpenLayers in a similar way to adding WMS or OSM data.

