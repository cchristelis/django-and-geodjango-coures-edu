An Introduction to OpenLayers
Tim Sutton
Last Updated: %%mtime(%A %B %d, %Y)

%! target       : tex
%! style        : style.css
%! Options      : --toc --toc-level 1 --enum-title --css-sugar --css-inside
%! preproc      : TUT_URL   https://qgis.org
%! PostProc(html): '(?i)(<pre>)' '<div class="code">\1'
%! PostProc(html): '(?i)(</pre>)' '\1</div>'
%
% Tex processing
%
% Make sure this is first
%! PostProc(tex): '\\includegraphics' '\\includegraphics[width=100mm]'
% scartcl is from the koma script document class (apt-get install texlive-latex-recommended ttf-komatuna)
% setlength parindent suppresses first line of paragraph idents
% parskip puts blank space between paragraphs
% title pic stuff used to put a logo on the front page
%! PostProc(tex): '\\documentclass{article}' '\\documentclass{scrartcl}\n\\setlength{\\parindent}{0pt}\n\\setlength{\\parskip}{2ex}'
% use the color table and table packages so we can pimp the tables a little
%! PostProc(tex): '\\usepackage{style.css}  % user defined' '\\usepackage{fancyvrb}\n\\usepackage{colortbl} \n\\usepackage [table]{xcolor}\n\\definecolor{tableShade}{HTML}{cecece}\n\\definecolor{linfiniti-blue}{HTML}{0079FC}\n\\usepackage{wallpaper}\n\\LRCornerWallPaper{1}{WALLPAPER-IMAGE}\n\\usepackage{hyperref}\n\\hypersetup{linkcolor=linfiniti-blue,urlcolor=linfiniti-blue}\\renewcommand\\thesection{\\color{linfiniti-blue}\\thechapter\\arabic{section}}'
% Make the header row of tables have a dark background. light text
%! PostProc(tex): '\\hline \\textbf' '\\hline \\rowcolor[rgb]{0,0,0} \\color{white} \\textbf'
%! PostProc(tex): '& \\textbf' '& \\color{white} \\textbf'
% Make verbatim text a little smaller and use fancyvrb package to draw it in a box
% Note Verbatim with capital V for fancyvrb to work
%! PostProc(tex): '\\begin{verbatim}' '{\\scriptsize\\begin{Verbatim}[frame=single,rulecolor=\\color{linfiniti-blue}, framesep=4mm, label=\\fbox{\\small\\emph{Listing}}]'
%! PostProc(tex): '\\end{verbatim}' '\\end{Verbatim}\n}'
%! PostProc(tex): '\\section' '\\newpage\\section'
%! PostProc(tex): 'section{' 'section{\\color{linfiniti-blue}'
%! PostProc(tex): NEWPAGE  '\\newpage'
% Give alternating table rows different colours and use a smaller font in tables (\tiny)
%! PostProc(tex): '\\begin{tabular}' '\\rowcolors{2}{tableShade}{white} \n\\tiny\\begin{tabular}'
%! encoding: iso-8859-1

%! PostProc(tex): WALLPAPER-IMAGE '../resources/linfiniti-footer.png'
% These are comments and will not be generated in any output
% -------------------

%This document is in text2tags format. You can generate html, plain text and
%moinmoin formatted documentation by running txt2tags on this document. See the
%txt2tags home page for more details.  Please insert manual line breaks in this
%document as it makes diffing for changes much easier. To do this in vim
%automatically, select a section then issue (gq) command. Please dont
%apply vim formatting to the whole document as it screws up some formatting
%rather apply it selectively to paragraphs where needed.

% To generate the text version of this document:
% txt2tags -t txt -o index index.t2t
% To generate the moinmoin version of this document
% txt2tags -t moin -o index.moin  index.t2t
% To generate the html version of this document
% txt2tags -t html -o index.html index.t2t
% To generate a LaTeX / pdf
% txt2tags -t tex -o index.tex index.t2t; pdflatex index.tex


%--------------------------------------------

= An Introduction to OpenLayers =

In this workshop I will introduce you to the [OpenLayers http://openlayers.org]
javascript library. OpenLayers is a client side (it runs in your browser)
library that can fetch and display geospatial data from various sources,
including WMS and WFS, GeoRSS, Google maps, Bing maps and so on.

In order to enjoy this tutorial, you will probably need to know a little bit
about HTML and JavaScript, although I have tried to keep the examples
approachable to those who have little or no knowledge of these two standards.

== Getting Ready ==

Before you start, you should have completed my Mapserver workshop (so that you
have some local WMS sources available), or you need to have a working internet
connection available. The first thing you need to do is to create a working
directory and download and unpack OpenLayers into it. A copy of OpenLayers is
provided on our resource cd, otherwise, fetch a copy from
http://openlayers.org.

So lets make a working dir and unpack openlayers into it:

```
mkdir ol
tar xfz installers/generic_installers/OpenLayers-2.10.tar.gz
mv OpenLayers-2.10/ openlayers
```

The last command is just for convenience so this tutorial remains current even
if you are using a newer version of OpenLayers.

I would also strongly recommend that you use firefox for your work and install
the 'firebug' developer extension to it. It will let us debug our pages if they
have any errors.

== Make your first map! ==

We are going to make the 'hello world' equivalent for OpenLayers - a simple map
that displays data from a WMS resource.

First I will provide the complete listing:

```
<html>
    <head>
        <title>Tim's Map</title>
        <link rel="stylesheet" href="openlayers/theme/default/style.css" type="text/css" />
        <style>
            #map-id {
                width: 512px;
                height: 512px;
            }
        </style>
        <script src="openlayers/lib/OpenLayers.js"></script>
    </head>
    <body>
        <h1>The world according to Tim</h1>
        <div id="map-id"></div>
        <script>
            var map = new OpenLayers.Map("map-id");
            var imagery = new OpenLayers.Layer.WMS(
                "Country",
                "http://196.35.94.243/cgi-bin/mapserv?map=ZA_SPOT10m2010",
                {layers: "Spot5_RSA_2010_10m", format : "image/jpeg"}
                // Or with our own map:
                //"http://localhost/cgi-bin/mapserv?map=/home/web/mapserver/mapfiles/world.map",
                //{layers: "Country,Cities", format : "image/png; mode=24bit"}
            );
            map.addLayer(imagery);
            map.zoomToMaxExtent();
        </script>
    </body>
</html>

```


Ok so lets try to understand what is going on here - I will break it down line
by line:

``<html>`` - All html pages must start with this tag - it says "I'm starting my
page now". Similarly, you will see that the page ends with ``</html>`` - which
means "I'm ending my page now". All tags that you open in html must be balanced
by closing them again.

``<head>`` - Each html page can have a header section where you can declare
various page properties and include other files such as javascript files, style
sheets and so on. Notice once again that the ``</head>`` closes the header
section.

``<title>Tim's Map</title>`` - This is the title for the page. It will appear
in the top of the browser window. It is nested within the header section.

``<link rel="stylesheet" href="openlayers/theme/default/style.css"
type="text/css" />`` - Here I am referencing an //external// style sheet. In
this case it is one that ships with openlayers and provides the default theme
for openlayers.

```
<style>
     #map-id {
         width: 512px;
         height: 512px;
     }
</style>
```

This is an //inline// style sheet. It defines the height and width for an
element whose id is 'map-id'. We will create a 'div' block level element
further down to hold our openlayers map and call it map-id, so this line is
essentially just saying how big the map must be on the page.

``<script src="openlayers/lib/OpenLayers.js"></script>`` - Now we are including
an external javascript library. In this case the openlayers library. Doing this
brings in all the logic needed for us to be able to add openlayers mapping
functionality to our page.

``<body>`` and ``</body>`` Mark the start and end of the user visible part of
the page. Everything that follows will be part of the actual rendered web page.

``<h1>The world according to Tim</h1>`` - This is just a heading written to the
page in 'h1' (largest) heading style.

``<div id="map-id"></div>`` - Remember further up we set the style for a map-id
element? This is where it is defined. Because of its style definition in the
header, it will occupy 512px x 512px space on the page underneath the heading.

``<script>`` - Here I an inlining another piece of javascript within the web
page. It will run as the page loads.

``var map = new OpenLayers.Map("map-id");`` - This line is javascript. It
declares a new openlayers map variable and passes it our map-id div as a
parameter. The net result of doing that will be for openlayers to insert a map
into the //map-id// div element.

``var imagery = new OpenLayers.Layer.WMS(`` - Now that we have a map, the next
thing we do is to create a layer. You can see that it is a WMS layer. The open
bracket at the end of the line indicates that we will be passing the layer
constructor a bunch of options - which follow below.

``"Country",`` - This is the first option to the layer constructor. It tells
openlayers to set the display name for this layer to //Country//.
``"http://196.35.94.243/cgi-bin/mapserv?map=ZA_SPOT10m2010",`` - This is the
second option. It is a url to the WMS resource that should be displayed.
``{layers: "Spot5_RSA_2010_10m", format : "image/jpeg"}`` - This last option is
actually a list of 'sub' options. The first indicates which layers from the WMS
resource should be displayed. The second indicates which image format to use
for the retrieved WMS layer. The image format you can use depends on the WMS
  resource.
``);`` - This finalises the list of options for the WMS layer definition.

``map.addLayer(imagery);`` - Now that we have defined a layer, we tell
openlayers to add it to our map!

``map.zoomToMaxExtent();`` - Lastly, we tell openlayers to zoom the map to the
maximum extent of all the layers.

If you save and load this page in your browser, you should see something like
the image below.

 | [img/image01.jpeg]


== Controlling the map using javascript ==

=== A button to zoom to a place ===

The nice thing about openlayers is that once a map is loaded in your page, you
can control that map using javascript. For example we could add a little button
before the ``</body>`` terminator tag like this:

```
<input type="button" onclick="map.setCenter(new OpenLayers.LonLat(25,-24), 7 );" 
        value="Go To Your House" />
```

``<input type="button" value="Go To Your House" />`` - This is html notation
to place a button on the page with the text for the button specified by the
label option.

The //onclick// event of this button has been programmed with some mapserver
api calls. Lets break them down one at a time:

```map.setCenter()``` - Tells the openlayers map that we want to recenter it on a
new point. This function takes two parameters - a coordinate and a zoom level.
```new OpenLayers.LonLat(25,-24)``` - Creates a new LonLat object - the point
position to which we will be zooming. Note that openlayers calls any coordinate
pair 'lonlat' - even if it is in a projected coordinate reference system.
```7``` - This is the zoom level to use when panning.  By default openlayers has
16 zoom levels with 0 representing the smallest scale and 16 the largest.


**Now You try:** Add a new layer to the map (use google to find the url of a
wms layer if you don't have one handy.

If you have enabled firebug (and have enabled the jscript console, you can play
around with the map interactively. For example, try these:

```
>>> map.setCenter(map.center,3)
>>> map.setCenter(map.center,8)
```

=== Showing and hiding layers ===

You can do many other things with the map api - here is how you might hide and
show the first layer in the map.

```
>>> map.layers[0].setVisibility(false)
>>> map.layers[0].setVisibility(true)
```

Recent versions of firebug will 'intellisense complete' your javascript as you
type. See if you can figure out some other ways to manipulate the map.


== Other sources of data ==

In the previous section we saw that it is easy to use WMS services with
openlayers. There are other map sources you can use too. In this example, we
will show you how to add an [open street map http://openstreetmap.org] dataset
to your map. The OpenStreetmap project publish their data in the Google
Mercator projection, so we need to do a little work to set up the map
projection before we can add the layer.


**Map 2:**

```
<html>
    <head>
        <title>Tims Map</title>
        <link rel="stylesheet" href="openlayers/theme/default/style.css" type="text/css">
        <style>
            #map-id {
                width: 512px;
                height: 512px;
            }
        </style>
        <script src="openlayers/OpenLayers.js"></script>
    </head>
    <body>
        <h1>The world according to Tim</h1>
        <div id="map-id"></div>
        <script>
            var geographic = new OpenLayers.Projection("EPSG:4326");
            var mercator = new OpenLayers.Projection("EPSG:900913");

            var world = new OpenLayers.Bounds(-180, -89, 180, 89).transform(
                geographic, mercator
            );

            var options = {
                projection: mercator,
                units: "m",
                maxExtent: world
            };
            var map = new OpenLayers.Map("map-id", options);

            var osm = new OpenLayers.Layer.OSM();
            map.addLayer(osm);


            var gabs = new OpenLayers.LonLat(25,-24).transform(
                geographic, mercator
            );
            map.setCenter(gabs, 9);
        </script>
    </body>
</html>
```


Lets look in detail at the changes we have made to our project:

The <head> section remains unchanged as of the last example so I won't
re-discuss it here.  Our script starts off with these two lines:

```
var geographic = new OpenLayers.Projection("EPSG:4326");
var mercator = new OpenLayers.Projection("EPSG:900913");
```

What we are doing is defining to //Projection// objects - one based on
'Geographic' (EPSG:4326) and one based on 'Google Mercator' (EPSG:900913). We
will use these to calculate the dimensions of the bounding box for the map and
if we need to do any other conversions between Geographic/Lat Lon and Google
Mercator.

```
   var world = new OpenLayers.Bounds(-180, -89, 180, 89).transform(
        geographic, mercator
   );
```

Now we have defined the bounding box for the world by //transform//ing a
rectangle described in Geographic into a rectangle described in meters using
the Google Mercator projection.

```
   var options = {
     projection: mercator,
     units: "m",
     maxExtent: world
   };
```

The code above defines a variable 'options' and initialises it with an array of
map options. We will pass this options list as a parameter to openlayers when
we construct the map. You can see a [full list of options
http://dev.openlayers.org/docs/files/OpenLayers/Map-js.html] by reading the
mapserver api documentation. In our case, we are telling the map that its
projection will be 'mercator', map units will be in meters and the maximum
extent for the map will be the world rectangle which we calculated in the
previous step.

```
    var map = new OpenLayers.Map("map-id", options);
```

This is the same as out first example, except now we have added the options
parameter which is passed to the map when it is created.

```
    var osm = new OpenLayers.Layer.OSM();
    map.addLayer(osm);
```

Here we use the built in function to create a new OpenStreetMap (OSM) layer,
and then add it to the map.

```
    var gabs = new OpenLayers.LonLat(25,-24).transform(
      geographic, mercator
    );
```

In this step we center the map (somewhere near Gabarone). Because the map is in
EPSG:900913, we need to first reproject the LonLat coordinates for Gabarone to
Google Mercator, in a similar way to the bounding box transform we carried out
higher up.

```
    map.setCenter(gabs, 9);
```

Finally we can set the map center to Gabarone with a zoom level of 9.


Load your page and have a play around with it.

**Now you try:** Update the map so that it zooms to your house when it first loads.

== More complex interactions ==

Because everything is just html and javascript, you can create user interfaces
to allow the user to interact with the map in other ways. In this example we
add two input boxes (``input type ="text"``) and a button. When the user clicks
the button, the values entered in the input boxes will be used to in a call to
//map.setCenter()//.

```
    <label for="lon">Lon</label><input type="text" id="lon" />
    <label for="lat">Lat</label><input type="text" id="lat" />
    <input type="button" onclick="
      map.setCenter(
      new OpenLayers.LonLat(
      document.getElementById('lon').value,
      document.getElementById('lat').value)
      .transform(geographic, mercator), 14 );
      " value="Go!" /
    >
```

You will notice that we seamlessly transform the user's coordinates from
EPSG:4326 to EPSG:900913.

== Bing! ==

You can add Bing maps to OpenLayers in a similar way to adding WMS or OSM data.



